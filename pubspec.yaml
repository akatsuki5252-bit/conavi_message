name: conavi_message
description: A new Flutter project.

# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
version: 1.3.2+14

environment:
  sdk: ">=3.0.0 <4.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter

  # --- Firebase ---
  firebase_core: ^4.2.0        # Firebaseの基本機能（初期化・設定）を扱うコアパッケージ
  firebase_storage: ^13.0.3    # Firebase Storage（クラウドストレージ）に画像などのファイルをアップロード・取得するためのライブラリ
  cloud_firestore: ^6.0.3      # Firebase Firestore（NoSQLデータベース）を操作するためのライブラリ
  firebase_messaging: ^16.0.3  # Firebase Cloud Messaging（プッシュ通知機能）を扱うためのライブラリ

  # --- Network / API ---
  http: ^1.5.0    # HTTP通信（APIリクエスト / データ取得）を行うためのライブラリ
  dio: ^5.9.0     # HTTP通信をより柔軟に扱える高機能なクライアント（ファイルダウンロードなどにも対応）

  # --- UI Components ---
  flutter_screenutil: ^5.9.3            # 画面サイズに応じたレイアウト調整（レスポンシブ対応）を行うためのライブラリ
  flutter_app_badge_control: ^0.0.2
  # 古い
  flutter_easyloading: ^3.0.5           # ローディングインジケーターやトースト風の表示を簡単に実装できるライブラリ
  flutter_native_splash: ^2.4.6         # アプリ起動時（ネイティブ起動フェーズ）に表示されるスプラッシュ画面を自動生成するツール
  fluttertoast: ^9.0.0                  # 画面下に一時的なメッセージ（Toast）を表示するためのライブラリ
  flutter_cached_pdfview: ^0.4.3        # PDFを表示＆キャッシュして高速読み込みするビューア
  image_picker: ^1.2.0                  # 端末のカメラ撮影・ギャラリーから画像/動画を選択するためのライブラリ
  file_picker: ^10.3.3                  # 画像以外も含む任意のファイル（PDF・音声・ZIPなど）を選択できるピッカー

  # 古い
  badges: ^3.1.2                  # アイコンバッジ（通知バッジなど）をUIに表示するためのライブラリ
  # 古い
  bubble: ^1.2.1                  # チャットUIなどで吹き出し（バルーン）デザインを表示するためのライブラリ
  #　古い
  chat_bubbles: ^1.7.0            # チャットUI用のデザインコンポーネント（メッセージUIを簡単に実装）


  # --- Utility / Validation / System ---
  device_info_plus: ^12.1.0             # 端末情報（OSバージョン・機種名・デバイスIDなど）を取得するためのライブラリ
  image_size_getter: ^2.4.1             # 画像ファイルの幅・高さなどの情報を取得するためのライブラリ
  image: ^4.5.4                         # 画像の圧縮・加工・リサイズ処理などをDart側で行うためのライブラリ
  email_validator: ^3.0.0               # メールアドレスの形式チェックを行うバリデーションライブラリ
  flutter_riverpod: ^3.0.3              # 状態管理ライブラリ Riverpod（公式推奨アーキテクチャ対応）
  intl: any                             # 日付・数値・テキストのフォーマット（国際化対応）を扱うためのライブラリ
  path: ^1.9.1                          # ファイルパスの分解・結合・拡張子取得などに使えるパス操作ユーティリティ
  flutter_local_notifications: ^19.4.2  # ローカル通知（指定時間に端末内で通知）
  path_provider: ^2.1.5                 # 端末内の保存ディレクトリのパス取得（ファイル保存に必須）
  shared_preferences: ^2.5.3            # キー・バリュー形式の簡易ローカル保存（設定フラグ用）
  package_info_plus: ^9.0.0             # アプリのバージョン名やビルド番号などの情報を取得する
  share_plus: ^12.0.0                   # 画像やテキストなどを他アプリ(SNS/メール等)へ共有する機能を提供
  url_launcher: ^6.3.2                  # ブラウザ/電話/メール/マップなど端末のネイティブ機能でURLを開く
  cached_network_image: ^3.4.1          # ネット画像をキャッシュして高速表示するImageウィジェット（再読み込み時も通信削減）
  flutter_image_compress: ^2.4.0        # 画像ファイルを圧縮・リサイズして容量を小さくする（品質調整も可能）
  gallery_saver_plus: ^3.2.9

  # 音声
  #just_audio: ^0.9.32
  # audio_session: ^0.1.13
  # rxdart: ^0.27.7
  # リンク

  # PDF


  # 動画
  #video_player: ^2.6.1

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^6.0.0
  flutter_launcher_icons: ^0.14.4

flutter_icons:
  android: true
  ios: true
  image_path_android: "assets/icon/ic_launcher_512.png"
  image_path_ios: "assets/icon/ic_launcher_1024.png"

flutter_native_splash:
  # ── 共通設定（Android / iOS 両対応） ──
  color: "#ffffff"                           # ライトモード時の背景色（#でもOKだが " で囲むのが推奨）
  image: assets/splash/splash_768.png        # 表示するロゴ画像（768px推奨）
  fullscreen: true                           # ステータスバーを隠して全画面表示
  # ── ダークモード（任意だが実装済なのでOK） ──
  color_dark: "#262626"
  image_dark: assets/splash/splash_768.png
  # ── Android 12 専用設定（ここが重要！） ──
  android_12:
    image: assets/splash/splash_1152.png      # Android 12ではロゴ専用レイヤーになるので解像度大きめ必須
    icon_background_color: "#ffffff"          # 背景色（Android 12の仕様でロゴの後ろに丸が表示される）
    image_dark: assets/splash/splash_1152.png
    icon_background_color_dark: "#262626"


# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  assets:
    - assets/logo.png
    - assets/logo2.png
    - assets/sample.pdf

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages

  generate: true
